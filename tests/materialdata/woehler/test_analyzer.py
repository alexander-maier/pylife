# Copyright (c) 2019-2021 - for information on the respective copyright owner
# see the NOTICE file and/or the repository
# https://github.com/boschresearch/pylife
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
import pandas as pd
import pytest
import unittest.mock as mock

import pymc3
from io import StringIO

from pylife.materialdata import woehler

data = pd.DataFrame(np.array([
        [4.50e+02, 3.40e+04],
        [4.50e+02, 5.40e+04],
        [4.50e+02, 6.00e+04],
        [4.50e+02, 7.60e+04],
        [4.00e+02, 5.30e+04],
        [4.00e+02, 9.40e+04],
        [4.00e+02, 2.07e+05],
        [4.00e+02, 2.27e+05],
        [3.75e+02, 6.80e+04],
        [3.75e+02, 2.34e+05],
        [3.75e+02, 3.96e+05],
        [3.75e+02, 5.00e+05],
        [3.75e+02, 6.00e+05],
        [3.75e+02, 7.09e+05],
        [3.50e+02, 1.70e+05],
        [3.50e+02, 1.87e+05],
        [3.50e+02, 2.20e+05],
        [3.50e+02, 2.89e+05],
        [3.50e+02, 3.09e+05],
        [3.50e+02, 1.00e+07],
        [3.25e+02, 6.75e+05],
        [3.25e+02, 7.51e+05],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.00e+02, 8.95e+05],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07]
]), columns=['load', 'cycles']).sample(frac=1)

load_sorted = pd.Series(np.array([
        4.50e+02, 4.50e+02, 4.50e+02, 4.50e+02, 4.00e+02, 4.00e+02, 4.00e+02, 4.00e+02, 3.75e+02, 3.75e+02,
        3.75e+02, 3.75e+02, 3.75e+02, 3.75e+02, 3.50e+02, 3.50e+02, 3.50e+02, 3.50e+02, 3.50e+02, 3.50e+02,
        3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02, 3.25e+02,
        3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02, 3.00e+02]), name='load').sort_values()

cycles_sorted = pd.Series(np.array([
        3.40e+04, 5.40e+04, 6.00e+04, 7.60e+04, 5.30e+04, 9.40e+04, 2.07e+05, 2.27e+05, 6.80e+04, 2.34e+05,
        3.96e+05, 5.00e+05, 6.00e+05, 7.09e+05, 1.70e+05, 1.87e+05, 2.20e+05, 2.89e+05, 3.09e+05, 1.00e+07,
        6.75e+05, 7.51e+05, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07,
        8.95e+05, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07, 1.00e+07]), name='cycles').sort_values()

data_finite_sorted = pd.DataFrame(np.array([
        [4.50e+02, 3.40e+04],
        [4.50e+02, 5.40e+04],
        [4.50e+02, 6.00e+04],
        [4.50e+02, 7.60e+04],
        [4.00e+02, 5.30e+04],
        [4.00e+02, 9.40e+04],
        [4.00e+02, 2.07e+05],
        [4.00e+02, 2.27e+05],
        [3.75e+02, 6.80e+04],
        [3.75e+02, 2.34e+05],
        [3.75e+02, 3.96e+05],
        [3.75e+02, 5.00e+05],
        [3.75e+02, 6.00e+05],
        [3.75e+02, 7.09e+05],
]), columns=['load', 'cycles']).sort_values(by='load').reset_index(drop=True)

data_infinite_sorted = pd.DataFrame(np.array([
        [3.50e+02, 1.70e+05],
        [3.50e+02, 1.87e+05],
        [3.50e+02, 2.20e+05],
        [3.50e+02, 2.89e+05],
        [3.50e+02, 3.09e+05],
        [3.50e+02, 1.00e+07],
        [3.25e+02, 6.75e+05],
        [3.25e+02, 7.51e+05],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.25e+02, 1.00e+07],
        [3.00e+02, 8.95e+05],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07],
        [3.00e+02, 1.00e+07]
]), columns=['load', 'cycles']).sort_values(by='load').reset_index(drop=True)


data_01 = pd.DataFrame({"load": np.array([620, 620, 620, 550, 550, 500, 500, 500, 500, 500, 480, 480]), "cycles": np.array(
    [65783, 89552, 115800, 141826, 190443, 293418, 383341, 525438, 967091, 99505992, 99524024, 199563776])})
data_01_no_pure_runout_horizon = data_01[data_01.load > 480]


def read_data(s, thres=1e6):
    d = pd.read_csv(StringIO(s), sep="\t", comment="#", names=['cycles', 'load'])
    d.N_threshold = thres
    return d


data_02 = read_data("""
127700	450
108000	450
124000	450
127000	450
101000	450
199000	400
213600	400
166000	400
146000	400
140600	400
295000	350
264000	350
330000	350
352000	350
438000	350
645600	300
412000	300
772000	300
501200	300
593600	300
1856000	250
1989900	250
2114500	250
1121400	250
1233600	250
10000000	200
5131700	200
3857300	200
9620900	175
7634000	175
10000000	175
10000000	175
10000000	175""", 10000000)

data_03 = read_data("""
232620	350
332720	350
153310	350
224700	350
237550	350
437700	300
622692	300
661038	300
627443	300
585500	300
2369000	250
2721640	250
2175600	250
3565820	250
2961410	250
10000000	225
5053300	225
9092300	225
8428300	225
10000000	225
4985520	200
10000000	200
10000000	200
10000000	200
10000000	200
76236	400
54017	400
76850	400
133270	400
108600	400""", 10000000)

data_04 = read_data("""
859300	350
657200	350
586500	350
1308500	350
1448500	350
10000000	300
10000000	300
10000000	300
10000000	300
10000000	300
326000	450
262800	450
132000	450
193100	450
256700	450
2240200	325
1163000	325
1213200	325
1034700	325
2268300	325""", 10000000)

data_05 = read_data("""
5300000	135
5300000	135
5300000	135
1920000	135
5260000	135
2793000	135
5300000	135
2013000	135
5300000	135
1957000	135
1056000	145
966000	145
1065000	145
953000	145
653000	145
1551000	145
1052000	145
724000	145
844000	145
846000	145
1368000	145
1040000	145
875000	145
1577000	145
1046000	145
755000	145
661000	145
1169000	145
817000	145
737000	145
1777000	145
1547000	145
1888000	145
1023000	145
1967000	145
1475000	145
1428000	145
1598000	145
2068000	145
1627000	145
1084000	145
727000	145
1106000	145
1025000	145
508000	180
336000	180
378000	180
365000	180
373000	180
309000	180
400000	180
189000	180
394000	180
219000	180
214000	190
230000	190
267000	190
237000	205
223000	205
208000	205
157000	205
190000	205
237000	205
239000	205
157000	205
220000	205
157000	205
232000	205
67200	205
221300	205
114600	205
183500	205
253000	205
199300	205
225200	205
200500	205
183500	205
121900	205
163800	205
199200	205
150600	205
187300	205
110200	205
177100	205
171900	205
199900	205
145900	205
74000	235
43000	235
78000	235
35000	235
61000	235
59000	235
89000	235
70000	235
68000	235
83000	235
84000	235
55000	235
78000	235
43000	235
47000	235
59000	235
68000	235
41000	235
68000	235
50000	235
36500	250
34500	250
43700	250
30100	250
30100	260
24700	260
31700	260
29600	260
28200	280
16700	280
25100	280
16500	280
21800	280
19400	280
13500	280
12900	280
27700	280
21900	280
16200	300
9700	300
16700	300
12800	300
11900	300
11900	300
7400	300
14200	300
12700	300
11200	300
3600	350
3100	350
4700	350
3600	350
5200	350
4800	350
4000	350
3300	350
4000	350
4100	350
2200	350
2500	350
6200	350
4300	350
5300	350
5100	350
4600	350
3700	350
3700	350
3800	350""", 5300000)

data_06 = read_data("""
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
4000000	57
543780	65
1169900	65
1170400	65
1624800	65
2907300	65
3972700	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
4000000	65
365580	73
445160	73
449450	73
436840	73
588250	73
924350	73
952460	73
1630000	73
3113900	73
4000000	73
197000	80
224320	80
231110	80
233270	80
237520	80
240940	80
254190	80
283460	80
294560	80
297200	80
308670	80
316060	80
316060	80
43506	100
55036	100
63953	100
68223	100
88899	100
92251	100
93169	100
93539	100
95501	100
99483	100
100160	100
127970	100
143470	100
31980	120
38607	120
39685	120
43992	120
44612	120
46023	120
46880	120
46891	120
47000	120
50935	120
53111	120
53300	120
57686	120
58469	120
62843	120
67450	120""", 4000000)

data_07 = read_data("""
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
4000000	77
508620	85
1139400	85
2500700	85
4000000	85
4000000	85
4000000	85
4000000	85
4000000	85
4000000	85
4000000	85
4000000	85
4000000	85
1234000	92
3381300	92
3663900	92
4000000	92
4000000	92
4000000	92
4000000	92
4000000	92
4000000	92
4000000	92
318630	100
707320	100
911970	100
1137800	100
1463900	100
3147000	100
4000000	100
4000000	100
4000000	100
4000000	100
4000000	100
219640	120
240480	120
261510	120
263670	120
309230	120
377890	120
446390	120
507690	120
600220	120
636590	120
91370	140
91735	140
122630	140
123750	140
128130	140
129820	140
130600	140
140150	140
141850	140
148530	140
151510	140
153850	140
165780	140
175150	140
178780	140
186140	140
36696	160
42980	160
49858	160
57973	160
57998	160
72100	160
75905	160
79539	160
86238	160
90600	160
102270	160""", 4000000)

data_08 = read_data("""
4000000	77
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
1605000	120
1283000	120
1211000	120
1122000	120
1075000	120
987000	120
837000	120
704000	120
625000	120
584000	120
477000	120
254000	120
1297000	160
778000	160
666000	160
627000	160
617000	160
556000	160
524000	160
405000	160
399000	160
367000	160
356000	160
352000	160
308000	160
298000	160
295000	160
294000	160
278000	160
262000	160
255000	160
240000	160
206000	160
203000	160
201000	160
191000	160
180000	160
174000	160
173000	160
152000	160
147000	160
141000	160
109000	160
97000	160
25000	180
78000	180
112000	180
124000	180
139000	180
139000	180
144000	180
153000	180
214000	180
243000	180
249000	180
262000	180
308000	180
351000	180
501000	180
583000	180
1129000	180""", 2000000)

data_09 = read_data("""
4000000	77
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
2000000	120
1605000	120
1283000	120
1211000	120
1122000	120
1075000	120
987000	120
837000	120
704000	120
625000	120
584000	120
477000	120
254000	120
1297000	160
778000	160
666000	160
627000	160
617000	160
556000	160
524000	160
405000	160
399000	160
367000	160
356000	160
352000	160
308000	160
298000	160
295000	160
294000	160
278000	160
262000	160
255000	160
240000	160
206000	160
203000	160
201000	160
191000	160
180000	160
174000	160
173000	160
152000	160
147000	160
141000	160
109000	160
97000	160
25000	180
78000	180
112000	180
124000	180
139000	180
139000	180
144000	180
153000	180
214000	180
243000	180
249000	180
262000	180
308000	180
351000	180
501000	180
583000	180
1129000	180""", 1e6)

data_10 = read_data("""
104000	103
150000	103
200000	103
321000	103
2141000	103
2747000	103
77000	131
90000	131
108000	131
115000	131
116000	131
142000	131
38000	149
42000	149
47000	149
54000	149
61000	149
76000	149
20000	168
25000	168
30000	168
39000	168
42000	168
49000	168
187000	100
156000	100
5000000	98
5000000	98
480000	98
296000	98
5000000	96
276000	96
261000	96
1648000	93
5000000	93
3762000	93
221000	93
5000000	91
5000000	91
60000	112
121000	112
121000	112
135000	112
144000	112
159000	112
162000	112
165000	112
167000	112
172000	112
181000	112
181000	112
183000	112
225000	112
226000	112
227000	112
229000	112
231000	112
234000	112
243000	112
248000	112
257000	112
263000	112
272000	112
272000	112
275000	112
276000	112
279000	112
280000	112
284000	112
293000	112
314000	112
320000	112
322000	112
328000	112
333000	112
363000	112
371000	112
401000	112
495000	112""", 5000000)

data_11 = read_data("""
60000	377.556025
51000	377.556025
83000	377.556025
140000	377.556025
109000	377.556025
106000	377.556025
119000	377.556025
76000	377.556025
68000	377.556025
67000	377.556025
111000	377.556025
57000	377.556025
69000	377.556025
75000	377.556025
122000	377.556025
128000	377.556025
95000	377.556025
87000	377.556025
82000	377.556025
132000	377.556025
100000	372.6527
90000	372.6527
59000	372.6527
80000	372.6527
128000	372.6527
117000	372.6527
177000	372.6527
98000	372.6527
158000	372.6527
107000	372.6527
125000	372.6527
118000	372.6527
99000	372.6527
186000	372.6527
66000	372.6527
132000	372.6527
97000	372.6527
87000	372.6527
69000	372.6527
109000	372.6527
199000	367.749375
105000	367.749375
147000	367.749375
113000	367.749375
98000	367.749375
118000	367.749375
182000	367.749375
131000	367.749375
156000	367.749375
78000	367.749375
84000	367.749375
103000	367.749375
89000	367.749375
124000	367.749375
71000	367.749375
65000	367.749375
220000	367.749375
109000	367.749375
93000	367.749375
171000	367.749375
141000	362.84605
143000	362.84605
98000	362.84605
122000	362.84605
110000	362.84605
132000	362.84605
194000	362.84605
155000	362.84605
104000	362.84605
83000	362.84605
125000	362.84605
165000	362.84605
146000	362.84605
100000	362.84605
318000	362.84605
136000	362.84605
200000	362.84605
201000	362.84605
251000	362.84605
111000	362.84605
118000	357.942725
273000	357.942725
192000	357.942725
238000	357.942725
105000	357.942725
398000	357.942725
108000	357.942725
182000	357.942725
130000	357.942725
170000	357.942725
181000	357.942725
119000	357.942725
152000	357.942725
199000	357.942725
89000	357.942725
211000	357.942725
324000	357.942725
164000	357.942725
133000	357.942725
121000	357.942725
173000	353.0394
218000	353.0394
162000	353.0394
288000	353.0394
394000	353.0394
585000	353.0394
295000	353.0394
262000	353.0394
127000	353.0394
151000	353.0394
181000	353.0394
209000	353.0394
141000	353.0394
186000	353.0394
309000	353.0394
192000	353.0394
117000	353.0394
203000	353.0394
198000	353.0394
255000	353.0394
156000	348.136075
173000	348.136075
125000	348.136075
852000	348.136075
559000	348.136075
442000	348.136075
168000	348.136075
286000	348.136075
261000	348.136075
227000	348.136075
285000	348.136075
253000	348.136075
166000	348.136075
133000	348.136075
309000	348.136075
247000	348.136075
112000	348.136075
202000	348.136075
365000	348.136075
702000	348.136075
230000	343.23275
169000	343.23275
178000	343.23275
271000	343.23275
129000	343.23275
568000	343.23275
115000	343.23275
280000	343.23275
305000	343.23275
326000	343.23275
1101000	343.23275
285000	343.23275
734000	343.23275
177000	343.23275
493000	343.23275
218000	343.23275
342000	343.23275
431000	343.23275
143000	343.23275
381000	343.23275
155000	338.329425
397000	338.329425
1063000	338.329425
738000	338.329425
140000	338.329425
364000	338.329425
218000	338.329425
461000	338.329425
174000	338.329425
326000	338.329425
504000	338.329425
374000	338.329425
321000	338.329425
169000	338.329425
426000	338.329425
248000	338.329425
350000	338.329425
348000	338.329425
265000	338.329425
293000	338.329425
168000	333.4261
397000	333.4261
385000	333.4261
1585000	333.4261
224000	333.4261
987000	333.4261
358000	333.4261
763000	333.4261
610000	333.4261
532000	333.4261
449000	333.4261
498000	333.4261
714000	333.4261
159000	333.4261
326000	333.4261
291000	333.4261
425000	333.4261
146000	333.4261
246000	333.4261
253000	333.4261
154000	328.522775
305000	328.522775
957000	328.522775
1854000	328.522775
363000	328.522775
457000	328.522775
415000	328.522775
559000	328.522775
767000	328.522775
210000	328.522775
678000	328.522775
332000	328.522775
180000	328.522775
1274000	328.522775
528000	328.522775
254000	328.522775
835000	328.522775
611000	328.522775
482000	328.522775
593000	328.522775
184000	323.61945
241000	323.61945
273000	323.61945
1842000	323.61945
371000	323.61945
830000	323.61945
683000	323.61945
1306000	323.61945
562000	323.61945
166000	323.61945
981000	323.61945
1867000	323.61945
493000	323.61945
418000	323.61945
2978000	323.61945
1463000	323.61945
2200000	323.61945
312000	323.61945
251000	323.61945
760000	323.61945
4257000	318.716125
879000	318.716125
799000	318.716125
1388000	318.716125
271000	318.716125
308000	318.716125
2073000	318.716125
227000	318.716125
347000	318.716125
669000	318.716125
1154000	318.716125
393000	318.716125
250000	318.716125
196000	318.716125
548000	318.716125
475000	318.716125
1705000	318.716125
2211000	318.716125
975000	318.716125
2925000	318.716125
1144000	313.8128
231000	313.8128
523000	313.8128
474000	313.8128
4510000	313.8128
3107000	313.8128
815000	313.8128
6297000	313.8128
1580000	313.8128
605000	313.8128
1786000	313.8128
206000	313.8128
1943000	313.8128
935000	313.8128
283000	313.8128
1336000	313.8128
727000	313.8128
370000	313.8128
1065000	313.8128
413000	313.8128
619000	313.8128
2214000	313.8128
1826000	313.8128
597000	313.8128
226000	308.909475
570000	308.909475
974000	308.909475
549000	308.909475
4396000	308.909475
10000000	308.909475
257000	308.909475
370000	308.909475
457000	308.909475
1093000	308.909475
627000	308.909475
5803000	308.909475
10000000	308.909475
590000	308.909475
2662000	308.909475
850000	308.909475
7215000	308.909475
307000	308.909475
1936000	308.909475
1477000	308.909475
2731000	308.909475
1460000	308.909475
3487000	308.909475
781000	308.909475
10000000	304.00615
2001000	304.00615
393000	304.00615
809000	304.00615
4576000	304.00615
10000000	304.00615
2314000	304.00615
10000000	304.00615
1022000	304.00615
502000	304.00615
7868000	304.00615
627000	304.00615
570000	304.00615
3425000	304.00615
5453000	304.00615
10000000	304.00615
1327000	304.00615
956000	304.00615
206000	304.00615
446000	304.00615
1745000	304.00615
317000	304.00615
8297000	304.00615
2139000	304.00615
311000	299.102825
10000000	299.102825
10000000	299.102825
935000	299.102825
1139000	299.102825
1792000	299.102825
10000000	299.102825
10000000	299.102825
10000000	299.102825
253000	299.102825
2578000	299.102825
329000	299.102825
10000000	299.102825
1456000	299.102825
845000	299.102825
5161000	299.102825
8131000	299.102825
10000000	299.102825
726000	299.102825
370000	299.102825
10000000	299.102825
3776000	299.102825
10000000	299.102825
954000	299.102825
10000000	294.1995
10000000	294.1995
10000000	294.1995
707000	294.1995
10000000	294.1995
10000000	294.1995
10000000	294.1995
10000000	294.1995
6280000	294.1995
1587000	294.1995
10000000	294.1995
10000000	294.1995
10000000	294.1995
10000000	294.1995
2295000	294.1995
4628000	294.1995
411000	294.1995
10000000	294.1995
10000000	294.1995
606000	294.1995
1595000	294.1995
919000	294.1995
700000	294.1995
10000000	294.1995
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
1282000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
6337000	289.296175
10000000	289.296175
10000000	289.296175
503000	289.296175
10000000	289.296175
10000000	289.296175
1609000	289.296175
1191000	289.296175
4070000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	289.296175
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
1369000	284.39285
10000000	284.39285
10000000	284.39285
1055000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
10000000	284.39285
1220000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	279.489525
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862""", 10000000)

data_12 = read_data("""
75000	377.556025
83000	377.556025
128000	377.556025
75000	377.556025
128000	377.556025
109000	362.84605
111000	362.84605
122000	362.84605
51000	362.84605
57000	362.84605
76000	362.84605
442000	348.136075
168000	348.136075
442000	348.136075
173000	348.136075
261000	348.136075
224000	333.4261
385000	333.4261
610000	333.4261
532000	333.4261
224000	333.4261
250000	318.716125
975000	318.716125
1705000	318.716125
1388000	318.716125
196000	318.716125
570000	304.00615
2314000	304.00615
1022000	304.00615
10000000	304.00615
7868000	304.00615
10000000	289.296175
10000000	289.296175
10000000	289.296175
4070000	289.296175
10000000	289.296175
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862""", 10000000)

data_13 = read_data("""
109000	377.556025
51000	377.556025
75000	377.556025
111000	377.556025
140000	377.556025
128000	362.84605
75000	362.84605
109000	362.84605
83000	362.84605
68000	362.84605
132000	362.84605
253000	333.4261
987000	333.4261
246000	333.4261
224000	333.4261
159000	333.4261
10000000	304.00615
4576000	304.00615
2139000	304.00615
10000000	304.00615
4576000	304.00615
1191000	289.296175
10000000	289.296175
6337000	289.296175
10000000	289.296175
10000000	289.296175""", 10000000)

data_14 = read_data("""
111000	377.556025
122000	377.556025
109000	377.556025
76000	377.556025
76000	377.556025
75000	362.84605
140000	362.84605
95000	362.84605
57000	362.84605
109000	362.84605
51000	362.84605
246000	333.4261
159000	333.4261
146000	333.4261
610000	333.4261
763000	333.4261
4576000	304.00615
627000	304.00615
570000	304.00615
10000000	304.00615
1022000	304.00615
10000000	289.296175
6337000	289.296175
10000000	289.296175
503000	289.296175
10000000	289.296175
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862
10000000	274.5862""", 10000000)

all_data = [
    data,
    data_01,
    data_02,
    data_03,
    data_04,
    data_05,
    data_06,
    data_07,
    data_08,
    data_09,
    data_10,
    data_11,
    data_12,
    data_13,
    data_14]
# ==========================================================


def test_woehler_accessor_missing_keys():
    wc = pd.Series({'k_1': 7, '1/TN': 12.0, 'ND_50': 1e6, 'SD_50': 350., '1/TS': 1.23})
    for k in wc.keys():
        _wc = wc.copy()
        del _wc[k]
        with pytest.raises(AttributeError, match=r"^.*Missing %s\." % k):
            _wc.woehler


def test_fatigue_data_property_methods():
    fd = woehler.determine_fractures(data, 1e7).sort_index().fatigue_data
    pd.testing.assert_series_equal(fd.load.sort_values(), load_sorted)
    pd.testing.assert_series_equal(fd.cycles.sort_values(), cycles_sorted)

    assert fd.num_runouts == 18
    assert fd.num_fractures == 22
    print(fd.finite_zone)
    print(data_finite_sorted)
    pd.testing.assert_frame_equal(fd.finite_zone
                                  .sort_values(by='load')
                                  .reset_index(drop=True)[['load', 'cycles']],
                                  data_finite_sorted)
    fd = woehler.determine_fractures(data, 1e7).sort_index().fatigue_data
    pd.testing.assert_frame_equal(fd.infinite_zone
                                  .sort_values(by='load')
                                  .reset_index(drop=True)[['load', 'cycles']],
                                  data_infinite_sorted)


def test_woehler_fracture_determination_given():
    df = pd.DataFrame({
        'load': [1, 2, 3],
        'cycles': [1e6, 1e7, 1e4]
    })

    expected = pd.DataFrame({
        'load': [1, 2, 3],
        'cycles': [1e6, 1e7, 1e4],
        'fracture': [True, False, True]
    })

    expected_runouts = pd.DataFrame({
        'load': [2],
        'cycles': [1e7],
        'fracture': [False]
    }, index=[1])

    expected_fractures = pd.DataFrame({
        'load': [1, 3],
        'cycles': [1e6, 1e4],
        'fracture': [True, True]
    }, index=[0, 2])

    test = woehler.determine_fractures(df, 1e7).sort_index()
    pd.testing.assert_frame_equal(test, expected)

    fd = test.fatigue_data
    pd.testing.assert_frame_equal(fd.fractures, expected_fractures)
    pd.testing.assert_frame_equal(fd.runouts, expected_runouts)


def test_woehler_fracture_determination_infered():
    df = pd.DataFrame({
        'load': [1, 2, 3],
        'cycles': [1e6, 1e7, 1e4]
    })

    expected = pd.DataFrame({
        'load': [1, 2, 3],
        'cycles': [1e6, 1e7, 1e4],
        'fracture': [True, False, True]
    })

    test = woehler.determine_fractures(df).sort_index()
    pd.testing.assert_frame_equal(test, expected)


def test_woehler_endur_zones():
    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    assert fd.fatigue_limit == 362.5


def test_woehler_endure_zones_no_runouts():
    df = data[data.cycles < 1e7]
    fd = woehler.determine_fractures(df, 1e7).fatigue_data
    assert fd.fatigue_limit == 0.0


def test_woehler_elementary():
    expected = pd.Series({
        'SD_50': 362.5,
        'k_1': 7.0,
        'ND_50': 3e5,
        '1/TN': 5.3,
        '1/TS': 1.27
    }).sort_index()

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = woehler.Elementary(fd).analyze().sort_index()
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)


def test_woehler_elementary_no_runouts():
    expected = pd.Series({
        'SD_50': 0.0,
        'k_1': 7.0,
        '1/TN': 5.3,
        '1/TS': 1.27
    }).sort_index()

    df = data[data.cycles < 1e7]
    fd = woehler.determine_fractures(df, 1e7).fatigue_data
    wc = woehler.Elementary(fd).analyze().sort_index().drop('ND_50')
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)


def test_woehler_probit():
    expected = pd.Series({
        'SD_50': 335,
        '1/TS': 1.19,
        'k_1': 6.94,
        'ND_50': 463000.,
        '1/TN': 5.26
    }).sort_index()

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = woehler.Probit(fd).analyze().sort_index()
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)


def test_woehler_max_likelihood_inf_limit():
    expected = pd.Series({
        'SD_50': 335,
        '1/TS': 1.19,
        'k_1': 6.94,
        'ND_50': 463000.,
        '1/TN': 5.26
    }).sort_index()

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = woehler.MaxLikeInf(fd).analyze().sort_index()
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)


def test_woehler_max_likelihood_full_without_fixed_params():
    expected = pd.Series({
        'SD_50': 335,
        '1/TS': 1.19,
        'k_1': 6.94,
        'ND_50': 463000.,
        '1/TN': 4.7
    }).sort_index()

    bic = 45.35256860035525

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    we = woehler.MaxLikeFull(fd)
    wc = we.analyze().sort_index()
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)
    np.testing.assert_almost_equal(we.bayesian_information_criterion(), bic, decimal=2)


def test_max_likelihood_full_with_fixed_params():
    expected = pd.Series({
        'SD_50': 335,
        '1/TS': 1.19,
        'k_1': 8.0,
        'ND_50': 520000.,
        '1/TN': 6.0
    }).sort_index()

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = (
        woehler.MaxLikeFull(fd)
        .analyze(fixed_parameters={'1/TN': 6.0, 'k_1': 8.0})
        .sort_index()
    )
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)
    assert wc['1/TN'] == 6.0
    assert wc['k_1'] == 8.0


def test_max_likelihood_full_method_with_all_fixed_params():
    """
    Test of woehler curve parameters evaluation with the maximum likelihood method
    """
    fp = {'k_1': 15.7, '1/TN': 1.2, 'SD_50': 280, '1/TS': 1.2, 'ND_50': 10000000}
    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    with pytest.raises(AttributeError, match=r'You need to leave at least one parameter empty!'):
        (
            woehler.MaxLikeFull(fd)
            .analyze(fixed_parameters=fp)
        )


@pytest.mark.parametrize("data,no", [(d, i) for i, d in enumerate(all_data)])
def test_max_likelihood_parameter_sign(data, no):
    def _modify_initial_parameters_mock(fd):
        return fd

    load_cycle_limit = 1e6
    if hasattr(data, "N_threshold"):
        load_cycle_limit = data.N_threshold
    fatdat = woehler.determine_fractures(data, load_cycle_limit=load_cycle_limit)
    ml = woehler.MaxLikeFull(fatigue_data=fatdat.fatigue_data)
    wl = ml.analyze()

    print("Data set number {}".format(no))
    print("Woehler parameters: {}".format(wl))

    def assert_positive_or_nan_but_not_zero(x):
        if np.isfinite(x):
            assert x >= 0
            assert not np.isclose(x, 0.0)

    assert_positive_or_nan_but_not_zero(wl['SD_50'])
    assert_positive_or_nan_but_not_zero(wl['1/TS'])
    assert_positive_or_nan_but_not_zero(wl['k_1'])
    assert_positive_or_nan_but_not_zero(wl['ND_50'])
    assert_positive_or_nan_but_not_zero(wl['1/TN'])


@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.pm')
def test_bayesian_slope_trace(pm):
    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    bayes = woehler.Bayesian(fd)
    bayes._nsamples = 1000
    bayes._slope_trace()

    formula, data_dict = pm.glm.GLM.from_formula.call_args[0]
    assert formula == 'y ~ x'
    pd.testing.assert_series_equal(data_dict['x'], np.log10(fd.fractures.load))
    np.testing.assert_array_equal(data_dict['y'], np.log10(fd.fractures.cycles.to_numpy()))
    family = pm.glm.GLM.from_formula.call_args[1]['family']  # Consider switch to kwargs property when py3.7 is dropped
    assert family is pm.glm.families.StudentT()

    pm.sample.assert_called_with(1000, target_accept=0.99, random_seed=None, chains=2, tune=1000)


@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.pm')
def test_bayesian_TN_trace(pm):
    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    bayes = woehler.Bayesian(fd)
    bayes._common_analysis()
    bayes._nsamples = 1000
    bayes._TN_trace()

    pm.HalfNormal.assert_called_with('stdev', sigma=1.3)

    assert pm.Normal.call_count == 2

    expected_mu = 5.294264482012933
    expected_sigma = 0.2621494419382026

    assert pm.Normal.call_args_list[0][0] == ('mu',)
    np.testing.assert_almost_equal(pm.Normal.call_args_list[0][1]['mu'], expected_mu, decimal=9)
    np.testing.assert_almost_equal(pm.Normal.call_args_list[0][1]['sigma'], expected_sigma, decimal=9)

    assert pm.Normal.call_args_list[1][0] == ('y',)
    observed = pm.Normal.call_args_list[1][1]['observed']  # Consider switch to kwargs property when py3.7 is dropped
    np.testing.assert_almost_equal(observed.mean(), expected_mu, decimal=9)
    np.testing.assert_almost_equal(observed.std(), expected_sigma, decimal=9)

    pm.sample.assert_called_with(1000, target_accept=0.99, random_seed=None, chains=3, tune=1000)


@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.tt')
@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.pm')
def test_bayesian_SD_TS_trace_mock(pm, tt):
    def check_likelihood(l, var):
        assert var == tt.as_tensor_variable.return_value
        assert isinstance(l.likelihood, woehler.analyzers.likelihood.Likelihood)
        np.testing.assert_array_equal(l.likelihood._fd, fd)
        return 'foovar'

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    inf_load_mean = fd.infinite_zone.load.mean()
    inf_load_std = fd.infinite_zone.load.std()

    with mock.patch.object(woehler.Bayesian._LogLike, '__call__', autospec=True) as loglike_call:
        loglike_call.side_effect = check_likelihood

        bayes = woehler.Bayesian(fd)
        bayes._nsamples = 1000
        bayes._SD_TS_trace()

    pm.Normal.assert_called_once_with('SD_50', mu=inf_load_mean, sigma=inf_load_std * 5)
    pm.Lognormal.assert_called_once_with('TS_50', mu=np.log10(1.1), sigma=np.log10(0.5))

    tt.as_tensor_variable.assert_called_once_with([pm.Normal.return_value, pm.Lognormal.return_value])

    pm.Potential.assert_called_once_with('likelihood', 'foovar')

    pm.sample.assert_called_with(1000, cores=1,
                                 chains=3,
                                 random_seed=None,
                                 discard_tuned_samples=True,
                                 tune=1000)


@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.Bayesian._SD_TS_trace')
@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.Bayesian._TN_trace')
@mock.patch('pylife.materialdata.woehler.analyzers.bayesian.Bayesian._slope_trace')
def test_bayesian_mock(_slope_trace, _TN_trace, _SD_TS_trace):
    expected = pd.Series({
        'SD_50': 100.,
        '1/TS': 1.12,
        'k_1': 7.0,
        'ND_50': 1e6,
        '1/TN': 5.3
    }).sort_index()

    expected_slope_trace = {
        'x': np.array([0.0, -8.0, -6.0]),
        'Intercept': np.array([0.0, 19., 21.])
    }

    expected_SD_TS_trace = {
        'SD_50': np.array([0.0, 150., 50]),
        'TS_50': np.array([0.0, 1.22, 1.02])
    }

    _slope_trace.__call__().get_values.side_effect = lambda key: expected_slope_trace[key]
    _TN_trace.__call__().get_values.return_value = np.array([0.0, 5.4, 5.2])
    _SD_TS_trace.__call__().get_values.side_effect = lambda key: expected_SD_TS_trace[key]

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = woehler.Bayesian(fd).analyze(nsamples=10).sort_index()

    pd.testing.assert_series_equal(wc, expected)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy())


@pytest.mark.slow_acceptance
def test_bayesian_full():
    expected = pd.Series({
        'SD_50': 340.,
        '1/TS': 1.12,
        'k_1': 7.0,
        'ND_50': 400000.,
        '1/TN': 5.3
    }).sort_index()

    fd = woehler.determine_fractures(data, 1e7).fatigue_data
    wc = woehler.Bayesian(fd).analyze(random_seed=4223, progressbar=False).sort_index()
    pd.testing.assert_index_equal(wc.index, expected.index)
    np.testing.assert_allclose(wc.to_numpy(), expected.to_numpy(), rtol=1e-1)
